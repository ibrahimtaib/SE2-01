generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Teacher {
  id             String          @id @unique
  surname        String
  name           String
  email          String
  COD_GROUP      String
  COD_DEPARTMENT String
  Proposal       Proposal[]
  thesisRequests ThesisRequest[]
  coSupervised   CoSupervisor[]
}

model SecretaryClerk {
  id      String @id @unique
  surname String
  name    String
  email   String
}

model Degree {
  COD_DEGREE   String     @id
  TITLE_DEGREE String
  Students     Student[]
  Proposals    Proposal[]
}

model Courses {
  id           Int    @id @default(autoincrement())
  COD_COURSE   Int    @unique
  TITLE_COURSE String
}

model Career {
  id           String
  COD_COURSE   String
  TITLE_COURSE String
  CFU          Int
  grade        Int
  date         Int
  student      Student @relation(fields: [id], references: [id])

  @@id([id, COD_COURSE])
}

model Student {
  id              String          @id @unique
  surname         String
  name            String
  gender          String
  nationality     String
  email           String
  COD_DEGREE      String
  ENROLLMENT_YEAR Int
  applications    Application[]
  degree          Degree          @relation(fields: [COD_DEGREE], references: [COD_DEGREE])
  Career          Career[]
  thesisRequests  ThesisRequest[]
}

model Application {
  id          Int       @id @default(autoincrement())
  date        DateTime  @default(now())
  status      String
  comment     String?
  STUDENT_ID  String
  PROPOSAL_ID Int?
  student     Student   @relation(fields: [STUDENT_ID], references: [id])
  proposal    Proposal? @relation(fields: [PROPOSAL_ID], references: [id])
}

model Proposal {
  id                Int            @id @default(autoincrement())
  title             String
  supervisor        String
  keywords          String[]
  cosupervisors     CoSupervisor[]
  applications      Application[]
  type              String
  groups            String[]
  description       String
  notes             String?
  expiration        DateTime
  level             String
  cds               String
  archived          Boolean        @default(false)
  teacher           Teacher        @relation(fields: [supervisor], references: [id])
  requiredKnowledge String
  degree            Degree         @relation(fields: [cds], references: [COD_DEGREE])
}

model CoSupervisor {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  teacherId  String?
  proposalId Int
  teacher    Teacher? @relation(fields: [teacherId], references: [id])
  proposal   Proposal @relation(fields: [proposalId], references: [id])
}

model ThesisRequest {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  teacherId   String
  studentId   String
  type        String
  notes       String?
  status      String
  teacher     Teacher @relation(fields: [teacherId], references: [id])
  student     Student @relation(fields: [studentId], references: [id])
}
